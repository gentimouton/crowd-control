from client2.constants import DIRECTION_DOWN, DIRECTION_LEFT, DIRECTION_RIGHT, \
    DIRECTION_UP
from client2.events import CharactorMoveRequest, TickEvent, QuitEvent, \
    UpClickEvent, DownClickEvent, MoveMouseEvent, UnicodeKeyPushedEvent, \
    NonprintableKeyEvent
from pygame.locals import QUIT, KEYDOWN, K_ESCAPE, K_UP, K_DOWN, K_RIGHT, K_LEFT, \
    K_BACKSPACE, K_RETURN, MOUSEBUTTONUP, MOUSEBUTTONDOWN, MOUSEMOTION
from pygame.time import Clock
import pygame


class InputController:
    """ Every clock tick, the InputController looks at the events
    generated by keyboard and mouse and sends those events to the event manager
    """
    
    def __init__(self, evManager):
        self.evManager = evManager
        self.evManager.register_listener(self)
        
        self.nonprintable_keys = (K_RETURN, K_BACKSPACE) #non-printable keys to detect


    def notify(self, event):
        ''' every clock tick, handle input events from keyboard and mouse  '''
        if isinstance(event, TickEvent):
            for event in pygame.event.get():
                ev = None
                
                # click on the window's X to close it
                if event.type == QUIT:
                    ev = QuitEvent()
                    
                # keyboard events
                elif event.type == KEYDOWN:
                    if event.key == K_ESCAPE:
                        ev = QuitEvent()
                    elif event.key in self.nonprintable_keys: 
                        ev = NonprintableKeyEvent(event.key)
                    elif event.key == K_UP:
                        ev = CharactorMoveRequest(DIRECTION_UP)
                    elif event.key == K_DOWN:
                        ev = CharactorMoveRequest(DIRECTION_DOWN)
                    elif event.key == K_LEFT:
                        ev = CharactorMoveRequest(DIRECTION_LEFT)
                    elif event.key == K_RIGHT:
                        ev = CharactorMoveRequest(DIRECTION_RIGHT)
                    elif event.unicode is not '': 
                        # visible chars: letters, numbers, punctuation, space
                        ev = UnicodeKeyPushedEvent(event.key, event.unicode)
                        
                # click events
                elif event.type == MOUSEBUTTONDOWN and event.button == 1:
                    ev = DownClickEvent(event.pos)
                elif event.type == MOUSEBUTTONUP and event.button == 1:
                    ev = UpClickEvent(event.pos)
                elif event.type == MOUSEMOTION:
                    ev = MoveMouseEvent(event.pos)
                        
                if ev:
                    self.evManager.post(ev)




class ClockController:
    """ Each clock tick sends a TickEvent """
    
    def __init__(self, evManager):
        self.evManager = evManager
        self.evManager.register_listener(self)
        self.keep_going = True


    def run(self):
        clock = Clock()
        while self.keep_going:
            clock.tick(100) # 100 fps to save CPU
            event = TickEvent()
            self.evManager.post(event)
            

    def notify(self, event):
        if isinstance(event, QuitEvent):
            # stop the while loop from running
            self.keep_going = False



